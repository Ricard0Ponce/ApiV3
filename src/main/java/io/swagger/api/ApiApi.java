/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.47).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Alumno;
import io.swagger.model.AlumnoDTOLogin;
import io.swagger.model.AlumnoDTOid;
import io.swagger.model.AlumnosLoginBody;
import io.swagger.model.Cita;
import io.swagger.model.CitaDTO;
import io.swagger.model.Error204Alumno;
import io.swagger.model.Error204Cita;
import io.swagger.model.Error204Psiquiatra;
import io.swagger.model.Error403AlumnoID;
import io.swagger.model.Error404AlumnoID;
import io.swagger.model.Error404Cita;
import io.swagger.model.Error404CitaID;
import io.swagger.model.Error404Psiquiatra;
import io.swagger.model.Error500Alumno;
import io.swagger.model.Error500Cita;
import io.swagger.model.Error500Psiquiatra;
import io.swagger.model.Model204CitaDelete;
import io.swagger.model.Psiquiatra;
import io.swagger.model.PsiquiatraDTO;
import io.swagger.model.PsiquiatrasLoginBody;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-10-03T21:32:08.208259185Z[GMT]")
@Validated
public interface ApiApi {

        @Operation(summary = "Crear un nuevo alumno", description = "Crea un alumno", tags = { "Alumnos" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AlumnoDTOLogin.class))),

                        @ApiResponse(responseCode = "204", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error204Alumno.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Alumno.class))) })
        @RequestMapping(value = "/api/alumnos", produces = { "application/json" }, consumes = {
                        "application/json" }, method = RequestMethod.POST)
        ResponseEntity<?> createAlumno(
                        @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Alumno body);

        @Operation(summary = "Crear una nueva cita", description = "", tags = { "Citas" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "201", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CitaDTO.class))),

                        @ApiResponse(responseCode = "404", description = "No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404Cita.class))) })
        @RequestMapping(value = "/api/alumnos/{matricula}/citas", produces = { "application/json" }, consumes = {
                        "application/json" }, method = RequestMethod.POST)
        ResponseEntity<?> createCita(
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("matricula") String matricula,
                        @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Cita body);

        @Operation(summary = "Permite crear a un psiquiatra", description = "", tags = { "Psiquiatra" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PsiquiatraDTO.class))),

                        @ApiResponse(responseCode = "404", description = "No se encontro la cita", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404Psiquiatra.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Psiquiatra.class))) })
        @RequestMapping(value = "/api/psiquiatras", produces = { "application/json" }, consumes = {
                        "application/json" }, method = RequestMethod.POST)
        ResponseEntity<?> createPsiquiatra(
                        @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Psiquiatra body);

        @Operation(summary = "Eliminar cita por id", description = "", tags = { "Citas" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "204", description = "No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Model204CitaDelete.class))),

                        @ApiResponse(responseCode = "404", description = "No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404CitaID.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Cita.class))) })
        @RequestMapping(value = "/api/alumnos/{matricula}/citas/{id}", produces = {
                        "application/json" }, method = RequestMethod.DELETE)
        ResponseEntity<?> deleteCitaById(
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("matricula") String matricula,
                        @PathVariable("id") Long id);

        @Operation(summary = "Regresa la lista de todos los alumnos", description = "Regresa todos los Alumnos", tags = {
                        "Alumnos" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AlumnoDTOid.class)))),

                        @ApiResponse(responseCode = "204", description = "Ok No Content", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error204Alumno.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Alumno.class))) })
        @RequestMapping(value = "/api/alumnos", produces = { "application/json" }, method = RequestMethod.GET)
        ResponseEntity<?> getAllAlumnos();

        @Operation(summary = "Regresa una lista de todas las citas", description = "", tags = { "Citas" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CitaDTO.class)))),

                        @ApiResponse(responseCode = "204", description = "No se encontraron citas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error204Cita.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Cita.class))) })
        @RequestMapping(value = "/api/citas", produces = { "application/json" }, method = RequestMethod.GET)
        ResponseEntity<?> getAllCita();

        @Operation(summary = "Regresa una lista de todos los psiquiatras", description = "", tags = { "Psiquiatra" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PsiquiatraDTO.class)))),

                        @ApiResponse(responseCode = "204", description = "No se encontraron Psiquiatras", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error204Psiquiatra.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Psiquiatra.class))) })
        @RequestMapping(value = "/api/psiquiatras", produces = { "application/json" }, method = RequestMethod.GET)
        ResponseEntity<?> getAllPsiquiatras();

        @Operation(summary = "Regresa un Alumno por su matricula", description = "Regresa al alumno con la matricula especificada.", tags = {
                        "Alumnos" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AlumnoDTOid.class))),

                        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404AlumnoID.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Alumno.class))) })
        @RequestMapping(value = "/api/alumnos/{matricula}", produces = {
                        "application/json" }, method = RequestMethod.GET)
        ResponseEntity<?> getAlumnoByMatricula(
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("matricula") String matricula);

        @Operation(summary = "Regresa cita por id", description = "", tags = { "Citas" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CitaDTO.class))),

                        @ApiResponse(responseCode = "404", description = "No se encontro la cita", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404CitaID.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Cita.class))) })
        @RequestMapping(value = "/api/alumnos/{matricula}/citas/{id}", produces = {
                        "application/json" }, method = RequestMethod.GET)
        ResponseEntity<?> getCitaById(
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("matricula") String matricula,
                        @PathVariable("id") Long id);

        @Operation(summary = "Permite a un psiquiatra iniciar sesion", description = "Obtiene un objeto especificando Numero de trabajador y password. La respuesta es un psicologo con sus atributos", tags = {
                        "Psiquiatra" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PsiquiatraDTO.class))),

                        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404Psiquiatra.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Psiquiatra.class))) })
        @RequestMapping(value = "/api/psiquiatras/login", produces = { "application/json" }, consumes = {
                        "application/json" }, method = RequestMethod.POST)
        ResponseEntity<?> getLoginPsicologo(
                        @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody PsiquiatrasLoginBody body);

        @Operation(summary = "Regresa un Psiquiatra por numero de trabajador", description = "", tags = {
                        "Psiquiatra" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = PsiquiatraDTO.class))),

                        @ApiResponse(responseCode = "404", description = "No se encontro la cita", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404Psiquiatra.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Psiquiatra.class))) })
        @RequestMapping(value = "/api/psiquiatras/{NumTrabajador}", produces = {
                        "application/json" }, method = RequestMethod.GET)
        ResponseEntity<?> getPsiquiatraByNumTrabajador(
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("NumTrabajador") String NumTrabajador);

        @Operation(summary = "Permite a un alumno iniciar sesion", description = "Permite a un alumno iniciar sesión proporcionando su matrícula y contraseña.", tags = {
                        "Alumnos" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AlumnoDTOLogin.class))),

                        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error403AlumnoID.class))),

                        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404AlumnoID.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Alumno.class))) })
        @RequestMapping(value = "/api/alumnos/login", produces = { "application/json" }, consumes = {
                        "application/json" }, method = RequestMethod.POST)
        ResponseEntity<?> loginAlumno(
                        @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody AlumnosLoginBody body);

        @Operation(summary = "Actualiza una cita por id", description = "", tags = { "Citas" })
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cita.class))),

                        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error404CitaID.class))),

                        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Cita.class))) })
        @RequestMapping(value = "/api/alumnos/{matricula}/citas/{id}", produces = { "application/json" }, consumes = {
                        "application/json" }, method = RequestMethod.PUT)
        ResponseEntity<?> updateCitaById(
                        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("matricula") String matricula,
                        @PathVariable("id") Long id,
                        @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Cita body);

}
